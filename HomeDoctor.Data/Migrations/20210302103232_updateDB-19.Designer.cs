// <auto-generated />
using System;
using HomeDoctor.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeDoctor.Data.Migrations
{
    [DbContext(typeof(HomeDoctorContext))]
    [Migration("20210302103232_updateDB-19")]
    partial class updateDB19
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ContractDisease", b =>
                {
                    b.Property<int>("ContractsContractId")
                        .HasColumnType("int");

                    b.Property<string>("DiseasesDiseaseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContractsContractId", "DiseasesDiseaseId");

                    b.HasIndex("DiseasesDiseaseId");

                    b.ToTable("ContractDisease");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOBDoctor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOBPatient")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysOfTracking")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("FullNameDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNamePatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("NameLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumberDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceLicense")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkLocationDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("PatientId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Disease", b =>
                {
                    b.Property<string>("DiseaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiseaseId");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.HealthRecord", b =>
                {
                    b.Property<int>("HealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dicease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalHealthRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HealthRecordId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("PersonalHealthRecordId");

                    b.ToTable("HealthRecord");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.License", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfExamination")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LicenseId");

                    b.ToTable("License");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicalInstruction", b =>
                {
                    b.Property<int>("MedicalInstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalInstructionTypeId")
                        .HasColumnType("int");

                    b.HasKey("MedicalInstructionId");

                    b.HasIndex("HealthRecordId");

                    b.HasIndex("MedicalInstructionTypeId");

                    b.ToTable("MedicalInstruction");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicalInstructionShare", b =>
                {
                    b.Property<int>("MedicalInstructionShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalInstructionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalInstructionShareId");

                    b.HasIndex("ContractId");

                    b.HasIndex("MedicalInstructionId");

                    b.ToTable("MedicalInstructionShare");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicalInstructionType", b =>
                {
                    b.Property<int>("MedicalInstructionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalInstructionTypeId");

                    b.ToTable("MedicalInstructionType");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicationSchedule", b =>
                {
                    b.Property<int>("MedicationScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AfterNoon")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalInstructionId")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Morning")
                        .HasColumnType("int");

                    b.Property<int>("Night")
                        .HasColumnType("int");

                    b.Property<int>("Noon")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationScheduleId");

                    b.HasIndex("MedicalInstructionId");

                    b.ToTable("MedicationSchedule");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Career")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.PersonalHealthRecord", b =>
                {
                    b.Property<int>("PersonalHealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FamilyMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PersonalMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonalHealthRecordId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PersonalHealthRecord");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Relative", b =>
                {
                    b.Property<int>("RelativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RelativeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Relative");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.VitalSignSchedule", b =>
                {
                    b.Property<int>("VitalSignScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MedicalInstructionId")
                        .HasColumnType("int");

                    b.HasKey("VitalSignScheduleId");

                    b.HasIndex("MedicalInstructionId");

                    b.ToTable("VitalSignSchedule");
                });

            modelBuilder.Entity("ContractDisease", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractsContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDoctor.Data.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Account", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Contract", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDoctor.Data.Models.License", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("HomeDoctor.Data.Models.Patient", "Patient")
                        .WithMany("Contracts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("License");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Doctor", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Account", "Account")
                        .WithOne("Doctor")
                        .HasForeignKey("HomeDoctor.Data.Models.Doctor", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.HealthRecord", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Contract", "Contract")
                        .WithOne("HealthRecord")
                        .HasForeignKey("HomeDoctor.Data.Models.HealthRecord", "ContractId");

                    b.HasOne("HomeDoctor.Data.Models.PersonalHealthRecord", "PersonalHealthRecord")
                        .WithMany("HealthRecords")
                        .HasForeignKey("PersonalHealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("PersonalHealthRecord");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicalInstruction", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.HealthRecord", "HealthRecord")
                        .WithMany("MedicalInstructions")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDoctor.Data.Models.MedicalInstructionType", "MedicalInstructionType")
                        .WithMany()
                        .HasForeignKey("MedicalInstructionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthRecord");

                    b.Navigation("MedicalInstructionType");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicalInstructionShare", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Contract", "Contract")
                        .WithMany("MedicalInstructionShares")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDoctor.Data.Models.MedicalInstruction", "MedicalInstruction")
                        .WithMany()
                        .HasForeignKey("MedicalInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("MedicalInstruction");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicationSchedule", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.MedicalInstruction", "MedicalInstruction")
                        .WithMany("MedicationSchedules")
                        .HasForeignKey("MedicalInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInstruction");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Patient", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Account", "Account")
                        .WithOne("Patient")
                        .HasForeignKey("HomeDoctor.Data.Models.Patient", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.PersonalHealthRecord", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Patient", "Patient")
                        .WithOne("PersonalHealthRecord")
                        .HasForeignKey("HomeDoctor.Data.Models.PersonalHealthRecord", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Relative", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.Patient", "Patient")
                        .WithMany("Relatives")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.VitalSignSchedule", b =>
                {
                    b.HasOne("HomeDoctor.Data.Models.MedicalInstruction", "MedicalInstruction")
                        .WithMany()
                        .HasForeignKey("MedicalInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInstruction");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Account", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Contract", b =>
                {
                    b.Navigation("HealthRecord");

                    b.Navigation("MedicalInstructionShares");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.HealthRecord", b =>
                {
                    b.Navigation("MedicalInstructions");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.MedicalInstruction", b =>
                {
                    b.Navigation("MedicationSchedules");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Patient", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("PersonalHealthRecord");

                    b.Navigation("Relatives");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.PersonalHealthRecord", b =>
                {
                    b.Navigation("HealthRecords");
                });

            modelBuilder.Entity("HomeDoctor.Data.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
